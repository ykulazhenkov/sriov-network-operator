// Code generated by MockGen. DO NOT EDIT.
// Source: libovsdb.go

// Package mock_libovsdb is a generated GoMock package.
package mock_libovsdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cache "github.com/ovn-org/libovsdb/cache"
	client "github.com/ovn-org/libovsdb/client"
	model "github.com/ovn-org/libovsdb/model"
	ovsdb "github.com/ovn-org/libovsdb/ovsdb"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Cache mocks base method.
func (m *MockClient) Cache() *cache.TableCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(*cache.TableCache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockClientMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockClient)(nil).Cache))
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Connect mocks base method.
func (m *MockClient) Connect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockClientMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClient)(nil).Connect), arg0)
}

// Connected mocks base method.
func (m *MockClient) Connected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Connected indicates an expected call of Connected.
func (mr *MockClientMockRecorder) Connected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockClient)(nil).Connected))
}

// Create mocks base method.
func (m *MockClient) Create(arg0 ...model.Model) ([]ovsdb.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].([]ovsdb.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), arg0...)
}

// CurrentEndpoint mocks base method.
func (m *MockClient) CurrentEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentEndpoint indicates an expected call of CurrentEndpoint.
func (mr *MockClientMockRecorder) CurrentEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentEndpoint", reflect.TypeOf((*MockClient)(nil).CurrentEndpoint))
}

// Disconnect mocks base method.
func (m *MockClient) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockClientMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect))
}

// DisconnectNotify mocks base method.
func (m *MockClient) DisconnectNotify() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectNotify")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// DisconnectNotify indicates an expected call of DisconnectNotify.
func (mr *MockClientMockRecorder) DisconnectNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectNotify", reflect.TypeOf((*MockClient)(nil).DisconnectNotify))
}

// Echo mocks base method.
func (m *MockClient) Echo(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Echo indicates an expected call of Echo.
func (mr *MockClientMockRecorder) Echo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockClient)(nil).Echo), arg0)
}

// Get mocks base method.
func (m *MockClient) Get(arg0 context.Context, arg1 model.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockClient) List(ctx context.Context, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockClientMockRecorder) List(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClient)(nil).List), ctx, result)
}

// Monitor mocks base method.
func (m *MockClient) Monitor(arg0 context.Context, arg1 *client.Monitor) (client.MonitorCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Monitor", arg0, arg1)
	ret0, _ := ret[0].(client.MonitorCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Monitor indicates an expected call of Monitor.
func (mr *MockClientMockRecorder) Monitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Monitor", reflect.TypeOf((*MockClient)(nil).Monitor), arg0, arg1)
}

// MonitorAll mocks base method.
func (m *MockClient) MonitorAll(arg0 context.Context) (client.MonitorCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorAll", arg0)
	ret0, _ := ret[0].(client.MonitorCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonitorAll indicates an expected call of MonitorAll.
func (mr *MockClientMockRecorder) MonitorAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorAll", reflect.TypeOf((*MockClient)(nil).MonitorAll), arg0)
}

// MonitorCancel mocks base method.
func (m *MockClient) MonitorCancel(ctx context.Context, cookie client.MonitorCookie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorCancel", ctx, cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// MonitorCancel indicates an expected call of MonitorCancel.
func (mr *MockClientMockRecorder) MonitorCancel(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorCancel", reflect.TypeOf((*MockClient)(nil).MonitorCancel), ctx, cookie)
}

// NewMonitor mocks base method.
func (m *MockClient) NewMonitor(arg0 ...client.MonitorOption) *client.Monitor {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMonitor", varargs...)
	ret0, _ := ret[0].(*client.Monitor)
	return ret0
}

// NewMonitor indicates an expected call of NewMonitor.
func (mr *MockClientMockRecorder) NewMonitor(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMonitor", reflect.TypeOf((*MockClient)(nil).NewMonitor), arg0...)
}

// Schema mocks base method.
func (m *MockClient) Schema() ovsdb.DatabaseSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].(ovsdb.DatabaseSchema)
	return ret0
}

// Schema indicates an expected call of Schema.
func (mr *MockClientMockRecorder) Schema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockClient)(nil).Schema))
}

// SetOption mocks base method.
func (m *MockClient) SetOption(arg0 client.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOption", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOption indicates an expected call of SetOption.
func (mr *MockClientMockRecorder) SetOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOption", reflect.TypeOf((*MockClient)(nil).SetOption), arg0)
}

// Transact mocks base method.
func (m *MockClient) Transact(arg0 context.Context, arg1 ...ovsdb.Operation) ([]ovsdb.OperationResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transact", varargs...)
	ret0, _ := ret[0].([]ovsdb.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transact indicates an expected call of Transact.
func (mr *MockClientMockRecorder) Transact(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transact", reflect.TypeOf((*MockClient)(nil).Transact), varargs...)
}

// UpdateEndpoints mocks base method.
func (m *MockClient) UpdateEndpoints(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateEndpoints", arg0)
}

// UpdateEndpoints indicates an expected call of UpdateEndpoints.
func (mr *MockClientMockRecorder) UpdateEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoints", reflect.TypeOf((*MockClient)(nil).UpdateEndpoints), arg0)
}

// Where mocks base method.
func (m *MockClient) Where(arg0 ...model.Model) client.ConditionalAPI {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(client.ConditionalAPI)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockClientMockRecorder) Where(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockClient)(nil).Where), arg0...)
}

// WhereAll mocks base method.
func (m *MockClient) WhereAll(arg0 model.Model, arg1 ...model.Condition) client.ConditionalAPI {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhereAll", varargs...)
	ret0, _ := ret[0].(client.ConditionalAPI)
	return ret0
}

// WhereAll indicates an expected call of WhereAll.
func (mr *MockClientMockRecorder) WhereAll(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAll", reflect.TypeOf((*MockClient)(nil).WhereAll), varargs...)
}

// WhereAny mocks base method.
func (m *MockClient) WhereAny(arg0 model.Model, arg1 ...model.Condition) client.ConditionalAPI {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhereAny", varargs...)
	ret0, _ := ret[0].(client.ConditionalAPI)
	return ret0
}

// WhereAny indicates an expected call of WhereAny.
func (mr *MockClientMockRecorder) WhereAny(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAny", reflect.TypeOf((*MockClient)(nil).WhereAny), varargs...)
}

// WhereCache mocks base method.
func (m *MockClient) WhereCache(predicate interface{}) client.ConditionalAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereCache", predicate)
	ret0, _ := ret[0].(client.ConditionalAPI)
	return ret0
}

// WhereCache indicates an expected call of WhereCache.
func (mr *MockClientMockRecorder) WhereCache(predicate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereCache", reflect.TypeOf((*MockClient)(nil).WhereCache), predicate)
}

// MockConditionalAPI is a mock of ConditionalAPI interface.
type MockConditionalAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConditionalAPIMockRecorder
}

// MockConditionalAPIMockRecorder is the mock recorder for MockConditionalAPI.
type MockConditionalAPIMockRecorder struct {
	mock *MockConditionalAPI
}

// NewMockConditionalAPI creates a new mock instance.
func NewMockConditionalAPI(ctrl *gomock.Controller) *MockConditionalAPI {
	mock := &MockConditionalAPI{ctrl: ctrl}
	mock.recorder = &MockConditionalAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditionalAPI) EXPECT() *MockConditionalAPIMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockConditionalAPI) Delete() ([]ovsdb.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].([]ovsdb.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockConditionalAPIMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConditionalAPI)(nil).Delete))
}

// List mocks base method.
func (m *MockConditionalAPI) List(ctx context.Context, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockConditionalAPIMockRecorder) List(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConditionalAPI)(nil).List), ctx, result)
}

// Mutate mocks base method.
func (m *MockConditionalAPI) Mutate(arg0 model.Model, arg1 ...model.Mutation) ([]ovsdb.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mutate", varargs...)
	ret0, _ := ret[0].([]ovsdb.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mutate indicates an expected call of Mutate.
func (mr *MockConditionalAPIMockRecorder) Mutate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutate", reflect.TypeOf((*MockConditionalAPI)(nil).Mutate), varargs...)
}

// Update mocks base method.
func (m *MockConditionalAPI) Update(arg0 model.Model, arg1 ...interface{}) ([]ovsdb.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].([]ovsdb.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockConditionalAPIMockRecorder) Update(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConditionalAPI)(nil).Update), varargs...)
}

// Wait mocks base method.
func (m *MockConditionalAPI) Wait(arg0 ovsdb.WaitCondition, arg1 *int, arg2 model.Model, arg3 ...interface{}) ([]ovsdb.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Wait", varargs...)
	ret0, _ := ret[0].([]ovsdb.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockConditionalAPIMockRecorder) Wait(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockConditionalAPI)(nil).Wait), varargs...)
}
