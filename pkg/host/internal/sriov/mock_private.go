// Code generated by MockGen. DO NOT EDIT.
// Source: sriov.go

// Package sriov is a generated GoMock package.
package sriov

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/k8snetworkplumbingwg/sriov-network-operator/api/v1"
)

// MocksriovPrivateInterface is a mock of sriovPrivateInterface interface.
type MocksriovPrivateInterface struct {
	ctrl     *gomock.Controller
	recorder *MocksriovPrivateInterfaceMockRecorder
}

// MocksriovPrivateInterfaceMockRecorder is the mock recorder for MocksriovPrivateInterface.
type MocksriovPrivateInterfaceMockRecorder struct {
	mock *MocksriovPrivateInterface
}

// NewMocksriovPrivateInterface creates a new mock instance.
func NewMocksriovPrivateInterface(ctrl *gomock.Controller) *MocksriovPrivateInterface {
	mock := &MocksriovPrivateInterface{ctrl: ctrl}
	mock.recorder = &MocksriovPrivateInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksriovPrivateInterface) EXPECT() *MocksriovPrivateInterfaceMockRecorder {
	return m.recorder
}

// addUdevRules mocks base method.
func (m *MocksriovPrivateInterface) addUdevRules(iface *v1.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addUdevRules", iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// addUdevRules indicates an expected call of addUdevRules.
func (mr *MocksriovPrivateInterfaceMockRecorder) addUdevRules(iface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addUdevRules", reflect.TypeOf((*MocksriovPrivateInterface)(nil).addUdevRules), iface)
}

// configureESwitchMode mocks base method.
func (m *MocksriovPrivateInterface) configureESwitchMode(iface *v1.Interface, ifaceStatus *v1.InterfaceExt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "configureESwitchMode", iface, ifaceStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// configureESwitchMode indicates an expected call of configureESwitchMode.
func (mr *MocksriovPrivateInterfaceMockRecorder) configureESwitchMode(iface, ifaceStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "configureESwitchMode", reflect.TypeOf((*MocksriovPrivateInterface)(nil).configureESwitchMode), iface, ifaceStatus)
}

// createSwitchdevVFsBySwitchingToLegacy mocks base method.
func (m *MocksriovPrivateInterface) createSwitchdevVFsBySwitchingToLegacy(iface *v1.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createSwitchdevVFsBySwitchingToLegacy", iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// createSwitchdevVFsBySwitchingToLegacy indicates an expected call of createSwitchdevVFsBySwitchingToLegacy.
func (mr *MocksriovPrivateInterfaceMockRecorder) createSwitchdevVFsBySwitchingToLegacy(iface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createSwitchdevVFsBySwitchingToLegacy", reflect.TypeOf((*MocksriovPrivateInterface)(nil).createSwitchdevVFsBySwitchingToLegacy), iface)
}

// createVFs mocks base method.
func (m *MocksriovPrivateInterface) createVFs(iface *v1.Interface, ifaceStatus *v1.InterfaceExt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createVFs", iface, ifaceStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// createVFs indicates an expected call of createVFs.
func (mr *MocksriovPrivateInterfaceMockRecorder) createVFs(iface, ifaceStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createVFs", reflect.TypeOf((*MocksriovPrivateInterface)(nil).createVFs), iface, ifaceStatus)
}

// removeUdevRules mocks base method.
func (m *MocksriovPrivateInterface) removeUdevRules(pciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "removeUdevRules", pciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// removeUdevRules indicates an expected call of removeUdevRules.
func (mr *MocksriovPrivateInterfaceMockRecorder) removeUdevRules(pciAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeUdevRules", reflect.TypeOf((*MocksriovPrivateInterface)(nil).removeUdevRules), pciAddress)
}

// unbindAllVFsOnPF mocks base method.
func (m *MocksriovPrivateInterface) unbindAllVFsOnPF(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "unbindAllVFsOnPF", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// unbindAllVFsOnPF indicates an expected call of unbindAllVFsOnPF.
func (mr *MocksriovPrivateInterfaceMockRecorder) unbindAllVFsOnPF(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unbindAllVFsOnPF", reflect.TypeOf((*MocksriovPrivateInterface)(nil).unbindAllVFsOnPF), addr)
}
