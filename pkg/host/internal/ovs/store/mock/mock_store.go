// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/k8snetworkplumbingwg/sriov-network-operator/api/v1"
)

// MockOVSStore is a mock of OVSStore interface.
type MockOVSStore struct {
	ctrl     *gomock.Controller
	recorder *MockOVSStoreMockRecorder
}

// MockOVSStoreMockRecorder is the mock recorder for MockOVSStore.
type MockOVSStoreMockRecorder struct {
	mock *MockOVSStore
}

// NewMockOVSStore creates a new mock instance.
func NewMockOVSStore(ctrl *gomock.Controller) *MockOVSStore {
	mock := &MockOVSStore{ctrl: ctrl}
	mock.recorder = &MockOVSStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOVSStore) EXPECT() *MockOVSStoreMockRecorder {
	return m.recorder
}

// AddManagedOVSBridge mocks base method.
func (m *MockOVSStore) AddManagedOVSBridge(br *v1.OVSConfigExt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddManagedOVSBridge", br)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddManagedOVSBridge indicates an expected call of AddManagedOVSBridge.
func (mr *MockOVSStoreMockRecorder) AddManagedOVSBridge(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddManagedOVSBridge", reflect.TypeOf((*MockOVSStore)(nil).AddManagedOVSBridge), br)
}

// GetManagedOVSBridge mocks base method.
func (m *MockOVSStore) GetManagedOVSBridge(name string) *v1.OVSConfigExt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedOVSBridge", name)
	ret0, _ := ret[0].(*v1.OVSConfigExt)
	return ret0
}

// GetManagedOVSBridge indicates an expected call of GetManagedOVSBridge.
func (mr *MockOVSStoreMockRecorder) GetManagedOVSBridge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedOVSBridge", reflect.TypeOf((*MockOVSStore)(nil).GetManagedOVSBridge), name)
}

// GetManagedOVSBridges mocks base method.
func (m *MockOVSStore) GetManagedOVSBridges() map[string]*v1.OVSConfigExt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedOVSBridges")
	ret0, _ := ret[0].(map[string]*v1.OVSConfigExt)
	return ret0
}

// GetManagedOVSBridges indicates an expected call of GetManagedOVSBridges.
func (mr *MockOVSStoreMockRecorder) GetManagedOVSBridges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedOVSBridges", reflect.TypeOf((*MockOVSStore)(nil).GetManagedOVSBridges))
}

// RemoveManagedOVSBridge mocks base method.
func (m *MockOVSStore) RemoveManagedOVSBridge(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveManagedOVSBridge", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveManagedOVSBridge indicates an expected call of RemoveManagedOVSBridge.
func (mr *MockOVSStoreMockRecorder) RemoveManagedOVSBridge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveManagedOVSBridge", reflect.TypeOf((*MockOVSStore)(nil).RemoveManagedOVSBridge), name)
}
